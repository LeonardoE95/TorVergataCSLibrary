{
  "nomeCorso": "Algoritmi e strutture dati",
  "docente": "Luciano Guala'",
  "annoAccademico": "2017-2018",
  "crediti": "12",
  "settore": "INF/01",
  "anno": "2",
  "semestre": "1-2",
  "propedeuticit\u00e0": "Analisi Matematica. Matematica discreta. Programmazione dei calcolatori con laboratorio.",
  "comunicazioni": [
    {
      "titolo": "Appelli settembre ASD",
      "data": "07-09-2018 21:56",
      "contenuto": "Si avvisano gli studenti che gli appelli di settembre relativi al corso di Algoritmi e Strutture Dati sono esclusivi, per entrambi i moduli. Lo studente pu\u00f2 invece sostenere i moduli separatamente, uno in ogni appello. E' possibile inoltre presentarsi al secondo appello qualora non si consegnasse lo scritto al primo."
    },
    {
      "titolo": "sospensione ricevimento studenti (prof. Clementi)",
      "data": "11-07-2018 18:25",
      "contenuto": "Si comunica che, durante le sessioni di esame,\u00a0 il ricevimento studentidel prof. Clementi \u00e8 sospeso. Tutti le informazioni circa il programma dettagliato, le singole lezioni svolte con gli appunti (slides) ed i riferimenti ai testi sono disponibili sul sito ufficiale del corso:http://www.mat.uniroma2.it/~guala/ASDL_2017.htm."
    },
    {
      "titolo": "Lezione luned\u00ec 30/04 ASD",
      "data": "27-04-2018 09:35",
      "contenuto": "La lezione in oggetto non si terr\u00e0."
    },
    {
      "titolo": "Prova parziale ASD mod. 1",
      "data": "10-01-2018 15:50",
      "contenuto": "La prova parziale relativa al modulo 1 del corso di Algoritmi e Strutture Dati (dot. Gual\u00e0) relativo all'a.a. 2017/18 si terr\u00e0 il giorno 12 febbraio 2018, alle ore 11,30 in aula T5. Gli studenti che intendo partecipare sono invitati a iscriversi alla prova sul portale Delphi."
    },
    {
      "titolo": "Annullate lezioni ASD settimana del 18/12-22/12.",
      "data": "14-12-2017 18:39",
      "contenuto": "Si comunica che le ultime due lezioni di Algoritmi e Strutture Dati relative al primo modulo si terranno dopo le vacanze di natale, nei giorni luned\u00ec 8 gennaio e gioved\u00ec 11. Pertanto non ci sar\u00e0 lezione nella settimana del 18/12-22/12."
    }
  ],
  "lezioni": [
    {
      "id": "48",
      "data": "04-06-2018",
      "contenuto": "Esercitazione su programmazione dinamica\n- Es 3 dell'appello del 12/02/18 (http://www.mat.uniroma2.it/~guala/ASD_compito12_02_18_mod1.pdf)- Es 3 dell'appello del 19/09/17 (http://www.mat.uniroma2.it/~guala/ASD_compito19_09_17_mod1.pdf)."
    },
    {
      "id": "47",
      "data": "31-05-2018",
      "contenuto": "Algoritmi di approssimazione\n- Problema del Load Balancing\r\n- Algoritmo 2-approssimato\n- Algoritmo 3/2-approssimato\n- Problema del Knapsack- Algoritmo (1-epsilon)-approssimato."
    },
    {
      "id": "46",
      "data": "28-05-2018",
      "contenuto": "- Concetto di equivalenza fra problemi NP-completi (ripasso)\n- Problemi di Ottimizzazione: definizione formale ed esempi\n- Relazione tra problemi di ottimizzazione e loro versione decisionale\n- Problemi di ottimizzazione NP-Hard\n- Concetto di algoritmo approssimante: definizione formale\n- Un algoritmo 2-approssimante per VC\n\nTesto: KT."
    },
    {
      "id": "45",
      "data": "24-05-2018",
      "contenuto": "- Problemi NP-completi\n- Il problema 3-SAT \u00e8 in NP\n- NP-completezza di 3-SAT (senza dimostrazione)\n- Il problema Independent Set \u00e8 in NP\n- La riduzione polinomiale 3-SAT < IS: la tecnica dei GADGETS\n- Il problema Vertex Cover\n- Relazione tra VC e IS: equivalenza.\n\nTesto: KT."
    },
    {
      "id": "44",
      "data": "21-05-2018",
      "contenuto": "Il problema dell\u2019accesso ad una risorsa condivisa (Contention Resolution). Un protocollo distribuito. Analisi del protocollo.\nUn (sorprendente) algoritmo di approssimazione per il problema di max 3SAT. Analisi dell\u2019algoritmo. Stima del numero atteso di clausule soddisfatte. Accenno al metodo probabilistico. Stima del numero atteso di tentatvi prima di trovare una soluzione che soddisfa i 7/8 delle clausule.\n\nTesto: KT, pag 708-714, 719-721, 724-727."
    },
    {
      "id": "43",
      "data": "17-05-2018",
      "contenuto": "Lezione del 17/05\n\n-Introduzione agli algoritmi randomizzati.\n-Il problema del calcolo del global mini-cut.\n-Algoritmo di Karger. Dimostrazione che il numero di global min-cut di un grafo di n nodi \u00e8 al pi\u00f9 n(n-1)/2.\n\nTesto: KT, pag 714-719."
    },
    {
      "id": "42",
      "data": "14-05-2018",
      "contenuto": "- Definizione formale di Certificatori efficienti\n- Definizione formale della classe NP\n- Relazione di NP con P ed EXP\n- Esempi di problemi e di certificatori per essi\n- Riducibilit\u00e0 polinomiale: versioni di Cook e Karp\n- Propriet\u00e0 della riducibilit\u00e0 di Karp: chiusura rispetto a P\n\nTesto: KT."
    },
    {
      "id": "41",
      "data": "10-05-2018",
      "contenuto": "- Programmazione dinamica: il problema del Sequence Alignment\n- Modellazione del Problema e principali applicazioni\n- Un primo approccio sbagliato di Programmazione Dinamica ad una variabile\n- L'approccio a due variabili corretto\n- Complessit\u00e0 e correttezza: lo spazio utilizzato\n- La trasformazione a problemi di cammini minimi\n\n- Introduzione alla classe NP\n- Problemi efficientemente verificabili: esempi\n- Ripasso della Pseudopolinomialit\u00e0\n\nTesto: KT."
    },
    {
      "id": "40",
      "data": "07-05-2018",
      "contenuto": "Esercitazione sulla programmazione dinamica. I due esercizi discussi possono essere trovati nelle seguenti note:http://www.mat.uniroma2.it/~guala/discussi_2017.pdf"
    },
    {
      "id": "39",
      "data": "03-05-2018",
      "contenuto": "- programmazione dinamica: calcolare cammini minimi in grafi con pesi negativi\n- cammini minimi in grafi pesati\n- problema dei cammini minimi a singola sorgente (o singola destinazione)\n- grafi con pesi negativi: false partenze\n- un algoritmo di programmazione dinamica: algoritmo di Bellman-Ford (BF) con complessit\u00e0 temporale O(mn) e spaziale O(n^2)\n- ridurre la memoria a O(n)\n- modificare l'algoritmo di BF per rilevare cicli di peso negativo\n\nTesto: KT."
    },
    {
      "id": "38",
      "data": "26-04-2018",
      "contenuto": "- Programmazione dinamica: ripasso degli esempi precedenti e valutazioni generali sulle condizioni di applicabilit\u00e0\n- Programmazione dinamica: Il problema della Bisaccia.\n- Un approccio di programazione dinamica con un parametro che non funziona\n- Un approccio a due parametri che funziona\n- Analisi dell'ottimalit\u00e0\n- Implementazione dell'algoritmo ricorsivo\n- Analisi della complessit\u00e0\n- Gli algoritmi pseudopolinomiali\n\nTesto: KT."
    },
    {
      "id": "37",
      "data": "23-04-2018",
      "contenuto": "- Il problema Weighted Interval Scheduling (continua)\n- Come calcolare la soluzione ottima da OPT(J)\n- La versione ricorsiva efficiente dell'algoritmo di programmazione dinamica: analisi della complessit\u00e0 mediante la misura progresso \u03a6.\n- Il problema Segmented Least Squares\n- Introduzione informale e definizione rigorosa.\n- Esempi\n- Formulazione del problema in termini di programmazione dinamica\n- L'algoritmo ottimale: versione iterativa ed analisi della complessit\u00e0\n\nTesto: KT."
    },
    {
      "id": "36",
      "data": "19-04-2018",
      "contenuto": "- La programmazione dinamica\n- cenni storici ed applicazioni principali\n- Descrizione informale\n- Il problema Weighted Interval Scheduling\n- Non ottimalit\u00e0 di alcuni approcci greedy\n- Un possibile ordinamento dell'istanza e relativi sottoproblemi\n- La struttura dell'ottimo OPT(j)\n- Formulazione ricorsiva di OPT(j)\n- Un algoritmo di programmazione dinamica ricorsivo non efficiente: analisi del caso peggiore.\n- Un algoritmo iterativo efficiente: analisi del caso peggiore.\n\nTesto: KT."
    },
    {
      "id": "35",
      "data": "16-04-2018",
      "contenuto": "- Compressione dati (Riepilogo lezione precendente)\n- La struttura dell'ottimo: propriet\u00e0\n- L'approccio BOTTOM-UP\n- Algoritmo e codici di Huffman\n- Esempi di esecuzione dell'Algoritmo di Huffman\n- Analisi della complessit\u00e0 dell'Algoritmo\n- Implementazione efficiente dell'Algoritmo mediante struttura Heap\n\nTesto: KT."
    },
    {
      "id": "34",
      "data": "12-04-2018",
      "contenuto": "- Compressione dati mediante codici prefissi: definizione formale\n- Rappresentazione di codici prefissi mediante alberi binari etichettati\n- La funzione ABL(C) definita su codici ed alberi associati\n- Progetto di algoritmi greedy per la costruzione di codici ottimali\n- La struttura dell'ottimo: alberi full\n- L'approccio TOP-DOWN (Codici di Shannon-Fano)\n\nTesto: KT."
    },
    {
      "id": "33",
      "data": "09-04-2018",
      "contenuto": "- Il problema del k-clustering: Definizione formale & Esempi\n- Il modellamento dell\u2019istanza come grafo completo pesato\n- L\u2019approccio Greedy basato sul MST e l\u2019algoritmo di Kruskal\n- Dimostrazione dell\u2019ottimalit\u00e0 dell\u2019Algoritmo Greedy\n- Il problema della Compressione Dati\n- Cenni storici, motivazioni, applicazioni moderne\n- Il problema della codifica: definizione informale\n- La codifica binaria di un testo a lunghezza variabile e la sua inefficienza su testi ridondanti\n- I codici prefissi: definizione.\n\nTesto: KT."
    },
    {
      "id": "32",
      "data": "05-04-2018",
      "contenuto": "- Maximum Latency: definizione del problema di ottimizzazione\n- Approcci greedy\n- L'algoritmo greedy deadline-first D\n- Struttura dell'ottimo\n- Ottimalit\u00e0 dell'algoritmo D\n- Riepilogo dei tools generali di progettazione ed analisi di algoritmi greedy\n- Il problema del CLUSTERING\n- Motivazioni e considerazioni generali.\n- Una possibile definizione formale di problema in termini di spazi metrici e k-partizioni.Fonte: KT."
    },
    {
      "id": "31",
      "data": "29-03-2018",
      "contenuto": "Esercitazione sul metodo greedy e sulle sue tecniche di analisi.L\u2019esempio del grafo con i pesi al quadrato (Es. 2a, KT, pag 189).L\u2019esercizio del minimizzare il n. di tappe di un percorso lineare (Solved Exercise 1, KT pag. 183).Considerazioni generali sull\u2019approccio greedy."
    },
    {
      "id": "30",
      "data": "26-03-2018",
      "contenuto": "Il problema Interval Partitioning.\nil concetto di Depth(I) di una istanza I.\nUn utile lower bound per Depth(I).\nUn algoritmo Greedy ottimale.\nImplementazione ed analisi della complessit\u00e0.\nDimostrazione di ottimalit\u00e0: confronto con il lower bound su depth(I).\n\nFonti: capitolo su GREEDY ALGORITHMS del KT."
    },
    {
      "id": "29",
      "data": "22-03-2018",
      "contenuto": "1. Introduzione ai problemi di scheduling\n2. Descrizione tecnica Greedy\n3. Il problema Interval Scheduling\n4. Approcci Greedy\n5. L'Algoritmo Greedy ottimale basato sul finish time\n6. Analisi della complessit\u00e0\n7. Dimostrazione di ottimalit\u00e0: \"Greedy stays ahead''\n8. La riduzione del problema al problema Max Independent Set su (Interval) Graphs\n\nFonti: capitolo su GREEDY ALGORITHMS del KT."
    },
    {
      "id": "28",
      "data": "19-03-2018",
      "contenuto": "1. Riepilogo Algoritmo A(G,e)\n2. La Struttura Dati Union-Find\n3. Definizione delle operazioni ammesse\n4. Esempi\n5. Soluzione mediante Foreste\n6. Una soluzione non efficiente\n7. La struttura Quick-Find\n8. Analisi della complessit\u00e0 ammortizzata della struttura Quick-Find\n9. Applicazione: L'Algoritmo di Kruskal K\n10. Implementazione di K mediante Quick-Find\n11. Analisi della complessit\u00e0 e della correttezza di K\n\nFonti: Union-Find: libro di Demetrescu et al (si vedano anche le slide a.a.2016-17). Algoritmo di Kruskal: libro KT."
    },
    {
      "id": "27",
      "data": "14-03-2018",
      "contenuto": "Esercitazione.\n1. La relazione tra Shortest Path Tree (SPT) e Minimum Spanning Tree (MST).\n2. Esempi di grafi che evidenziano la differenza.\n3. Algoritmo A(G,e) per la verifica dell\u2019appartenenza di un fissato arco ad un MST di un grafo pesato connesso (Es. n 3, p. 187 di [KT]).\n4. Dimostrazione della correttezza ed analisi della complessit\u00e0 dell\u2019Algoritmo A(G,e)."
    },
    {
      "id": "26",
      "data": "12-03-2018",
      "contenuto": "1.\u00a0 \u00a0 \u00a0 IL problema del MST2.\u00a0 \u00a0 \u00a0 Definizione formale come probl. di ott.3.\u00a0 \u00a0 \u00a0 Applicazioni principali (cenni)4.\u00a0 \u00a0 \u00a0 Propriet\u00e0 del Taglio e MST5.\u00a0 \u00a0 \u00a0 Propriet\u00e0 del Ciclo e MST6.\u00a0 \u00a0 \u00a0 Propriet\u00e0 dell'intersezione tra Cicli e Tagli7.\u00a0 \u00a0 \u00a0 Tre approcci Greedy8.\u00a0 \u00a0 \u00a0 l'Algoritmo di Prim (Visita)9.\u00a0 \u00a0 \u00a0 Correttezza dell'algoritmo di Prim mediante la Propr. 410.\u00a0 \u00a0 \u00a0Implementazione dell'Algoritmo11.\u00a0 \u00a0 \u00a0Esempio di esecuzione12.\u00a0 \u00a0 \u00a0Analisi della complessit\u00e0 temporale13.\u00a0 \u00a0 \u00a0Testo: Keliberg & Tardos, Algorithm Design14.\u00a0 \u00a0 \u00a0Slides del Prof. Clementi (file mst-andy-lesson1.pdf)"
    },
    {
      "id": "25",
      "data": "08-03-2018",
      "contenuto": "1.\u00a0 \u00a0 \u00a0 Introduzione generale al II modulo, modalit\u00e0 dell'esame.2.\u00a0 \u00a0 \u00a0 Def. del problema dei cammini minimi come problema di ottimizzazione.3.\u00a0 \u00a0 \u00a0 Propriet\u00e0 dei cammini minimi e dei loro sottocammini.4.\u00a0 \u00a0 \u00a0 Algoritmo di Dijkstra per cammini minimi.5.\u00a0 \u00a0 \u00a0 Correttezza e Complessit\u00e0 dell'Algoritmo.6.\u00a0 \u00a0 \u00a0 Libro: Demetrescu, Finocchi, Italiano, Algoritmi e Strutture Dati, McGraw-Hill.7.\u00a0 \u00a0 \u00a0 Slides del Dr. Gual\u00e0 (file Dijkstra2017)."
    },
    {
      "id": "24",
      "data": "11-01-2018",
      "contenuto": "Discussione (ancora) sull\u2019esercizio 3 del Problem Set 3 e correzione Esercizio 2. Esercizio: andare allo stadio con un amico spendendo il meno possibile (Esercizio 10)."
    },
    {
      "id": "23",
      "data": "08-01-2018",
      "contenuto": "Correzione Esercizio 1 e Esercizio 3 del Problem Set 3."
    },
    {
      "id": "22",
      "data": "14-12-2017",
      "contenuto": "Esercitazione. Spendere il meno possibile per andare ad una festa con regalo (Esercizio 9). Una soluzione di costo O(mn+n^2 log n). Una migliore soluzione di costo O(m+n log n). Una soluzione alternativa di costo O(m+n log n): tecnica della riduzione e utilizzo di grafi ausiliari."
    },
    {
      "id": "21",
      "data": "11-12-2017",
      "contenuto": "Cammini minimi in grafi pesati. Il problema del calcolo dei cammini minimi a singola sorgente. Un algoritmo veloce quando il grafo ha pesi non negativi: l'algoritmo di Dijkstra."
    },
    {
      "id": "20",
      "data": "07-12-2017",
      "contenuto": "Discussione sul Problem Set 2: correzione Esercizio 3; discussione Esercizio 4."
    },
    {
      "id": "19",
      "data": "04-12-2017",
      "contenuto": "Usi meno comuni della visita DFS. Catalogare per tipo gli archi del grafo. Individuare un ciclo in grafi diretti. Grafi diretti aciclici (DAG) e ordinamento topologico. Usare la visita DFS per trovare un ordinamento topologico di un DAG. Componenti fortemente connesse: un algoritmo lineare per calcolarle."
    },
    {
      "id": "18",
      "data": "30-11-2017",
      "contenuto": "Strutture dati per rappresentare un grafo. Matrice di adiacenza e Liste di adiacenza. Visite di un grafo. Visita in ampiezza (BFS): cammini minimi da una sorgente. Visita in profondit\u00e0 (DFS): uscire da un labirinto."
    },
    {
      "id": "17",
      "data": "27-11-2017",
      "contenuto": "I Grafi (diretti, non diretti, pesati). Nozioni preliminari. Cammini, distanze, diametro. Alberi. Grafi Euleriani. I grafi come linguaggio potente per descrivere scenari e problemi. Esempi di scenari/problematiche descrivibili come grafi/problemi su grafi (reti stradali/di trasporto, reti sociali, reti \u201cdelle dipendenze\u201d)."
    },
    {
      "id": "16",
      "data": "23-11-2017",
      "contenuto": "Il problema della Coda con priorit\u00e0. d-Heap, Heap Binomiali, (cenni sugli) Heap di Fibonacci."
    },
    {
      "id": "15",
      "data": "20-11-2017",
      "contenuto": "Esercitazione. Progettare un algoritmo che, dato un vettore ordinato A[1:n] di n bit, trova il numero k di zero presenti in A. Algoritmo con complessit\u00e0 O(log n). Un miglior algoritmo con tempo O(log k) (Es. 7). Progettare un algoritmo con complessit\u00e0 lineare che, dato un vettore A[1:n] di n bit, trova l\u2019indice k tale che il numero di zeri in A[1:k] \u00e8 uguale al numero di uni in A[k+1:n] (Es. 8)."
    },
    {
      "id": "14",
      "data": "16-11-2017",
      "contenuto": "Il problema del Dizionario: secondo episodio. Alberi AVL: definizione ed esempi. Dimostrazione della delimitazione superiore dell\u2019altezza di un albero AVL (che usa la nozione di albero di Fibonacci). Operazioni sugli alberi AVL: search, insert, delete."
    },
    {
      "id": "13",
      "data": "13-11-2017",
      "contenuto": "Il problema del Dizionario. Alberi binari di ricerca. Definizione. Visita in ordine simmetrico di un BST. Ricerca, inserimento, cancellazione (ricerca del massimo, del minimo, del predecessore e del successore di un nodo). Correzione Esercizio 3 del Problem Set 1."
    },
    {
      "id": "12",
      "data": "09-11-2017",
      "contenuto": "Esercitazione sulle visite di alberi. Progettazione di un algoritmo che, preso un albero con valori e colori (rosso e nero), trova il valore del cammino rosso di tipo nodo-radice di valore massimo (Es 4). Altro esercizio: progettare un algoritmo che,\u00a0 preso un albero e in intero h, restituisce il numero di nodi dell'albero di profondit\u00e0 almeno h (Es 5). Altro esercizio: preso un albero binario con valori, calcola il numero di nodi per cui la somma dei valori degli antenati \u00e8 uguale alla somma dei valori dei discendenti (Es. 6)."
    },
    {
      "id": "11",
      "data": "06-11-2017",
      "contenuto": "Strutture dati elementari: rappresentazioni indicizzate e rappresentazioni collegate. Implementazione di un dizionario con array ordinato/non ordinato e lista ordinata/non ordinata. Rappresentazioni di alberi. Algoritmi di visita di un albero: profondit\u00e0 versione iterativa, profondit\u00e0 versione ricorsiva (preordine, postordine, ordine simmetrico), ampiezza. Algoritmo per calcolare l\u2019altezza di un albero."
    },
    {
      "id": "10",
      "data": "02-11-2017",
      "contenuto": "Esercitazione. Primo esercizio: dato un array di n interi compresi fra 1 e k, costruire in tempo O(n+k) un oracolo (struttura dati) che sia in grado di rispondere in tempo costante a domande del tipo \"quanti interi nell'array sono compresi fra a e b?\"(Esercizio e soluzioni a fine delle slide sull'IntegerSort). Secondo esercizio: dato un vettore A di n numeri, progettare un algoritmo che in tempo O(n) trova due indici i e j con i<j che massimizzano A[j]-A[i] (Es. 3)."
    },
    {
      "id": "9",
      "data": "30-10-2017",
      "contenuto": "Delimitazioni superiori e inferiori di algoritmi e problemi. Un lower bound alla complessit\u00e0 temporale necessaria per ordinare n elementi (per una classe di algoritmi ragionevoli, quelli basati su confronti). Algoritmi veloci per ordinare interi: IntegerSort, BucketSort, RadixSort."
    },
    {
      "id": "8",
      "data": "26-10-2017",
      "contenuto": "Esercitazione. Esercizio: dimostrare o confutare una relazione asintotica (Es. 1). Esercizio di progettazione di un algoritmo che, dato un vettore ordinato A di n interi distinti e un valore x, trova (se esistono) due elementi di A che sommano a x. Soluzione banale con complessit\u00e0 quadratica, soluzione di complessit\u00e0 O(n log n) e soluzione con tempo O(n) (Es. 2)."
    },
    {
      "id": "7",
      "data": "23-10-2017",
      "contenuto": "Progettare algoritmi efficienti attraverso la progettazione di strutture dati efficienti. Un esempio: l'HeapSort - che ordina in loco n elementi in tempo O(n log n) nel caso peggiore."
    },
    {
      "id": "6",
      "data": "19-10-2017",
      "contenuto": "Il Problema dell\u2019ordinamento. Un algoritmo semplice ma inefficiente: il Selection Sort. Un algoritmo migliore: il MergeSort. Un altro algoritmo che usa la tecnica divide et impera: il QuickSort: analisi del caso peggiore, migliore, e intuizioni sul caso medio. Discussione versione randomizzata del QuickSort e differenza fra complessit\u00e0 nel caso medio e tempo atteso di un algoritmo randomizzato."
    },
    {
      "id": "5",
      "data": "16-10-2017",
      "contenuto": "Ancora sulle equazioni di ricorrenza. Metodo della sostituzione. Teorema Fondamentale delle Ricorrenze (Master). Semplici esempi. Quando non si pu\u00f2 applicare. Metodo del cambiamento di variabile."
    },
    {
      "id": "4",
      "data": "12-10-2017",
      "contenuto": "Analisi della complessit\u00e0 nel caso medio: un esempio. Il problema della ricerca di un elemento in un insieme: ricerca sequenziale e ricerca binaria. Equazioni di ricorrenza. Metodo dell\u2019iterazione. Metodo che usa l\u2019albero della ricorsione."
    },
    {
      "id": "3",
      "data": "09-10-2017",
      "contenuto": "Modello di calcolo RAM. Costi uniformi e logaritmici. Complessit\u00e0 caso peggiore, migliore, medio. Notazioni asintotiche: O-grande, Omega-grande, Theta. O-piccolo, Omega-piccolo. Definizioni e semplici esempi. Propriet\u00e0. Usare la notazione asintotica nelle analisi della complessit\u00e0 computazionale degli algoritmi."
    },
    {
      "id": "2",
      "data": "05-10-2017",
      "contenuto": "Il problema del calcolo dell\u2019n-esimo numero di Fibonacci. Un algoritmo numerico e un algoritmo ricorsivo. Analisi della complessit\u00e0 temporale dell\u2019algoritmo ricorsivo. Un algoritmo iterativo di complessit\u00e0 temporale O(n) e di complessit\u00e0 spaziale O(n) (Fibonacci3). Portare la memoria a O(1): Fibonacci4. Introduzione informale alla notazione asintotica. Algoritmo con complessit\u00e0 O(log n) per il calcolo dell\u2019n-simo numero di Fibonacci. Discussione della complessit\u00e0 spaziale degli algoritmi ricorsivi Fibonacci2 e Fibonacci6."
    },
    {
      "id": "1",
      "data": "02-10-2017",
      "contenuto": "Introduzione al corso. Motivazioni e concetti fondamentali. Un primo esempio: il problema di trovare una moneta falsa (pi\u00f9 pesante) fra n monete usando una bilancia a due piatti."
    }
  ],
  "materiale": [],
  "programma": "http://www.mat.uniroma2.it/~guala/ASDL_2017.htm",
  "testiRiferimento": "http://www.mat.uniroma2.it/~guala/ASDL_2017.htm",
  "ricevimento": "http://www.mat.uniroma2.it/~guala/ASDL_2017.htm",
  "modalit\u00e0Esame": "Una prova scritta e prova orale, per ognuno dei due moduli. Si vedano anche le slide introduttive al corso alla pagina:\nhttp://www.mat.uniroma2.it/~guala/ASDL_2017.htm"
}