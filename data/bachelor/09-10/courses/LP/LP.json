{
  "nomeCorso": "Linguaggi e metodologie di programmazione",
  "docente": "Miriam Di Ianni",
  "annoAccademico": "2009-2010",
  "crediti": "12",
  "settore": "",
  "anno": "2",
  "semestre": "1-2",
  "propedeuticit\u00e0": "Nessuna",
  "comunicazioni": [],
  "lezioni": [],
  "materiale": [],
  "programma": "Il corso \u00e8 logicamente suddiviso in due parti. \r\n\r\nNella prima parte vengono presentati i principi che guidano la progettazione, realizzazione e implementazione dei moderni linguaggi di programmazione. Anzich\u00e8 concentrarsi su uno specifico linguaggio, nel corso si identificano le caratteristiche pi\u00f9 importanti, comuni ad amplie classi di linguaggi.\r\n\r\nNella seconda parte vengono introdotti i principi del paradigma di programmazione object oriented prendendo come riferimento il linguaggio Java.\r\n\r\nProgramma svolto nel primo semestre: \r\n\r\nLinguaggi di programmazione (dal cap. 1 al cap. 5  - fino a 5.4 - di [1])\r\nMacchina astratta, interprete, linguaggio macchina.\r\nRealizzazione di una macchina astratta, implementazione di un linguaggio, implementazione interpretativa pura (definizione di interprete).\r\nImplementazione compilativa pura di un linguaggio (definizione di compilatore). Confronto tra implementazione compilativa pura e implementazione implementativa pura.\r\nImplementazione reale (con macchina intermedia) di un linguaggio, gerarchie di macchine astratte.\r\nLinguaggio visto come estensione della macchina astratta. Livelli di descrizione di un linguaggio. Grammatica e sintassi: grammatiche libere da contesto.\r\nNotazione BNF. Derivazione e linguaggi. Alberi di derivazione, grammatiche ambigue. Vincoli sintattici contestuali. Introduzione alle semantiche denotazionali e operazionali. Sintassi di un semplice linguaggio imperativo.\r\nSemantica Operazionale Strutturata: stato, transizione di stato. Semantica delle espressioni aritmetiche di un semplice linguaggio imperativo.\r\nSemantica Operazionale Strutturata: semantica delle espressioni logiche e dei comandi di un semplice linguaggio imperativo.\r\nSemantica Operazionale Strutturata: esempio di computazione. Nomi e oggetti denotabili. Ambiente e blocchi.\r\nBlocchi, regola di visibilit\u00e0 canonica, tipi di ambiente, modifiche dell'ambiente.\r\nRegole di scope statico.\r\nRegole di scope dinamico.\r\nAlcuni problemi di scope.\r\nTecniche di gestione della memoria. Gestione statica della memoria. Gestione dinamica della memoria con stack: record di attivazione, blocchi in-line, procedure.\r\n\r\nParadigma OO e linguaggio Java (dal cap. 1 al cap. 6 - fino a 6.5 - di [2])\r\nOggetti e classi, metodi e parametri. Introduzione a BlueJ. Progetti discussi: shapes.\r\nDefinizione di classi Java e di attributi. Progetti discussi: shapes, Picture, lab-classes, naive-ticket-machine.\r\nLa struttura delle classi Java, attributi, costruttori. Progetti discussi: naive-ticket-machine.\r\nMetodi, istruzione if, variabili locali. Progetti discussi: Better-ticket-machine.\r\nCooperazione tra oggetti. Creazione di oggetti e notazione punto. Progetti discussi: digital clock, sistema di mailing.\r\nCollezioni di oggetti, ArrayList, generics, costrutto for each, principio della delega. Progetti discussi: Notebook1.\r\nIteratori. Array. Progetti discussi:AuctionSystem.\r\nUtilizzo di librerie, Documentazione Java. La classe String. Progetti discussi: Support System.\r\nRaggruppare classi in package. Regole di visibilit\u00e0 delle classi. Mappe e Insiemi.\r\nIntroduzione al test e debugging. Test di unit\u00e0 con BlueJ. Test automation.\r\n\r\nProgramma svolto nel secondo semestre:\nLinguaggi di programmazione (dal cap. 5 - da 5.4 - al cap. 9 escluso di [1])\r\nGestione dinamica della memoria con heap: blocchi di dimensione fissa e variabile.\r\nImplementazione delle regole di scope: scope statico e scope dinamico.\r\nStrutturare il controllo: espressioni (6.1.3 escluso), nozione di comando, comandi per il controllo di sequenza, programmazione strutturata, ricorsione, ricorsione in coda.\r\nAstrarre sul controllo: sottoprogrammi, passaggio di parametri per valore, riferimento, costante, risultato, valore-risultato, nome. Funzioni di ordine superiore (solo funzioni come parametro senza aspetti implementativi). Eccezioni.\r\nStrutturare i dati: tipi di dato, sistema di tipi, tipi scalari, tipi composti, equivalenza e compatibilit\u00e0 tra tipi.\r\n\r\nParadigma OO e linguaggio Java (dal cap. 6 (par. 6.5) al cap. 12 di [2])\r\nModularizzazione e interfacce. Tecniche per la ricerca dei bugs. Progetti discussi: CalcEngine.\r\nPrincipi di progettazione delle classi: coesione e accoppiamento, progettazione responsability-driven. Eliminazione del codice duplicato mediante tecniche di astrazione e refactoring. Progetti discussi: world-of-zuul.\r\nPrincipi dell'ereditariet\u00e0 e del polimorfismo. Gerarchia delle classi Java. Progetti discussi: DoME\r\nOverriding, dispatch dinamico dei metodi, tipi stati e dinamici. Progetti discussi:DoME.\r\nClassi astratte e interfacce.  Progetti discussi: Foxes-and-rabbits.\r\nGestione degli eventi. Costruzioni di GUI: introduzione ai concetti fondamentali per la gestione delle GUI in linguaggio Java. Progetti discussi: ImageViewer.\r\nGestione degli errori. Strategia defensive programming. Tecniche di error reporting. Gestione delle eccezioni (checked exception e unchecked exception). Progetti discussi: address-book.\r\nI/O in Java: operazione di lettura e scrittura su filesystem. Serializzazione di oggetti.  Progetti discussi: dome-simple-output, address-book-io.",
  "testiRiferimento": "Libri di testo:\r\n[1] Linguaggi di programmazione. Principi e paradigmi - Gabbrielli Maurizio e Martini Simone - Editore McGraw-Hill Companies.\r\n[2] Objects First with Java - A Practical Introduction using BlueJ - David J. Barnes & Michael K\u00f6lling - Fourth Edition, Prentice Hall / Pearson Education, 2008.\r\nSito del libro: http://www.bluej.org/objects-first/\r\n--------------------------------------\r\nLibri di testo alternativi:\r\n[3] Programming Language Concepts. - Carlo Ghezzi, Mehadi Jazayeri - Editore Wiley.\r\n[4] Program Development in Java: Abstraction, Specification, and Object-Oriented Design - Barbara Liskov, John Guttag - Addison Wesley.\r\n--------------------------------------\r\nTesti di consultazione:\nThe Java Language Specification disponibile/scaricabile sul Web.\r\n\r\n----------------------------------------------------------------------------------------------\r\nLink a risorse utili:\r\nHOPL: History of Programming Languages.\r\nOpen directory of Programming Languages.\r\nGoogle's directory of programming languages.\r\nYahoo's directory of programming languages.\r\nHyperNews computer language list.\r\nDictionary of Programming Languages, Neal & Julie Ziring.\r\nThe Language List, maintained by Bill Kinnersley.\r\nSwich Statement code smell and Polymorphism.",
  "ricevimento": "Luned\u00ec e mercoled\u00ec al termine delle lezioni, o su appuntamento.",
  "modalit\u00e0Esame": "null"
}