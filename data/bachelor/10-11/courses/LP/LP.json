{
  "nomeCorso": "Linguaggi e metodologie di programmazione",
  "docente": "Marco Bianchi",
  "annoAccademico": "2010-2011",
  "crediti": "12",
  "settore": "",
  "anno": "2",
  "semestre": "1-2",
  "propedeuticit\u00e0": "Nessuna",
  "comunicazioni": [],
  "lezioni": [],
  "materiale": [],
  "programma": "Primo semestre\r\nIntroduzione dei principi del paradigma di programmazione object oriented prendendo come riferimento il linguaggio Java.\r\n\r\nProgramma di dettaglio del primo semestre:\r\nParadigma OO e linguaggio Java\r\nOggetti e classi, metodi e parametri. Introduzione a BlueJ. Progetti discussi: shapes.\r\nDefinizione di classi Java e di attributi. Progetti discussi: shapes, Picture, lab-classes, naive-ticket-machine.\r\nLa struttura delle classi Java, attributi, costruttori. Progetti discussi: naive-ticket-machine.\r\nMetodi, istruzione if, variabili locali. Progetti discussi: Better-ticket-machine.\r\nCooperazione tra oggetti. Creazione di oggetti e notazione punto. Progetti discussi: digital clock, sistema di mailing.\r\nCollezioni di oggetti, ArrayList, generics, costrutto for each, principio della delega. Progetti discussi: Notebook1.\r\nIteratori. Array. Progetti discussi:AuctionSystem.\r\nUtilizzo di librerie, Documentazione Java. La classe String. Progetti discussi: Support System.\r\nRaggruppare classi in package. Regole di visibilit\u00e0 delle classi. Mappe e Insiemi.\r\nIntroduzione al test e debugging. Test di unit\u00e0 con BlueJ. Test automation.\r\nUso di ANT per automazione delle procedure di compilazione e testing.\r\nModularizzazione e interfacce. Tecniche per la ricerca dei bugs. Progetti discussi: CalcEngine.\r\nPrincipi di progettazione delle classi: coesione e accoppiamento, progettazione responsability-driven. Eliminazione del codice duplicato mediante tecniche di astrazione e refactoring. Progetti discussi: world-of-zuul.\r\nPrincipi dell'ereditariet\u00e0 e del polimorfismo. Gerarchia delle classi Java. Progetti discussi: DoME\r\nClassi astratte e interfacce. Progetti discussi: Foxes-and-rabbits.\r\nGestione degli eventi. Costruzioni di GUI: introduzione ai concetti fondamentali per la gestione delle GUI in linguaggio Java. Progetti discussi: ImageViewer.\r\nGestione degli errori. Strategia defensive programming. Tecniche di error reporting. Gestione delle eccezioni (checked exception e unchecked exception). Progetti discussi: address-book.\r\nI/O in Java: operazione di lettura e scrittura su filesystem. Progetti discussi: dome-simple-output, address-book-io. \r\n\r\nSecondo semestre\r\n\r\nProgramma di dettaglio del secondo semestre:\r\nMacchina astratta, interprete, linguaggio macchina.\r\nRealizzazione di una macchina astratta, implementazione di un linguaggio, implementazione interpretativa pura (definizione di interprete).\r\nImplementazione compilativa pura di un linguaggio (definizione di compilatore). Confronto tra implementazione compilativa pura e implementazione implementativa pura.\r\nImplementazione reale (con macchina intermedia) di un linguaggio, gerarchie di macchine astratte.\r\nLinguaggio visto come estensione della macchina astratta.\r\nBlocchi, regola di visibilit\u00e0 canonica, tipi di ambiente, modifiche dell'ambiente.\r\nRegole di scope statico.\r\nRegole di scope dinamico.\r\nAlcuni problemi di scope.\r\nTecniche di gestione della memoria. Gestione statica della memoria. Gestione dinamica della memoria con stack: record di attivazione, blocchi in-line, procedure.\r\nGestione dinamica della memoria con heap: blocchi di dimensione fissa e variabile.\r\nImplementazione delle regole di scope: scope statico e scope dinamico.\r\nStrutturare il controllo: espressioni (6.1.3 escluso), nozione di comando, comandi per il controllo di sequenza, programmazione strutturata, ricorsione, ricorsione in coda.\r\nAstrarre sul controllo: sottoprogrammi, passaggio di parametri per valore, riferimento, costante, risultato, valore-risultato. Funzioni di ordine superiore (solo funzioni come parametro senza aspetti implementativi). Eccezioni.",
  "testiRiferimento": "Libri di testo:\r\n[1] Objects First with Java - A Practical Introduction using BlueJ - David J. Barnes & Michael K\u00f6lling - Fourth Edition, Prentice Hall / Pearson Education, 2008.\r\nSito del libro: http://www.bluej.org/objects-first/\r\n[2] Linguaggi di programmazione. Principi e paradigmi - Gabbrielli Maurizio e Martini Simone - Editore McGraw-Hill Companies. \r\n\r\nTesti di consultazione:\nThe Java Language Specification disponibile/scaricabile sul Web.",
  "ricevimento": "Luned\u00ec e mercoled\u00ec al termine delle lezioni, o su appuntamento.",
  "modalit\u00e0Esame": "null"
}